--Create Database SUBQUERIES;

--Use SUBQUERIES;
--Go

---Create SalesMan Table-----

/*GO
CREATE TABLE SalesMan (
    Salesman_ID INT PRIMARY KEY,
    Name VARCHAR(50),
    City VARCHAR(50),
    Commission DECIMAL(5,2)
);

INSERT INTO SalesMan (Salesman_ID, Name, City, Commission)
VALUES
    (5001, 'James Hoog', 'New York', 0.15),
    (5002, 'Nail Knite', 'Paris', 0.13),
    (5005, 'Pit Alex', 'London', 0.11),
    (5006, 'Mc Lyon', 'Paris', 0.14),
    (5007, 'Paul Adam', 'Rome', 0.13),
    (5003, 'Lauson Hen', 'San Jose', 0.12);

GO*/
--SELECT * FROM SalesMan;

----Create Order Table----------

/*GO
CREATE TABLE Orders (
    Ord_No INT PRIMARY KEY,
    Purch_Amt DECIMAL(10,2),
    Ord_Date DATE,
    Customer_ID INT,
    Salesman_ID INT
);*/

/*INSERT INTO Orders (Ord_No, Purch_Amt, Ord_Date, Customer_ID, Salesman_ID)
VALUES
    (70001, 150.5, '2012-10-05',  3005, 5002),
    (70009, 270.65, '2012-09-10', 3001, 5005),
    (70002, 65.26, '2012-10-05',  3002, 5001),
    (70004, 110.5, '2012-08-17',  3009, 5003),
    (70007, 948.5, '2012-09-10',  3005, 5002),
    (70005, 2400.6, '2012-07-27', 3007, 5001),
    (70008, 5760, '2012-09-10',   3002, 5001),
    (70010, 1983.43, '2012-10-10',3004, 5006),
    (70003, 2480.4, '2012-10-10', 3009, 5003),
    (70012, 250.45, '2012-06-27', 3008, 5002),
	(70011, 75.29,  '2012-08-17', 3003, 5007),
    (70013, 3045.6,  '2012-04-25',3002,  5001);
GO*/

--SELECT * FROM Orders;


-----------1.Find orders issued by Salesman 'Paul Adam'.---------

/*SELECT Ord_No, Purch_Amt, Ord_Date, Customer_ID, Salesman_ID  
FROM Orders  
WHERE Salesman_ID = (SELECT Salesman_ID FROM SalesMan WHERE Name = 'Paul Adam');*/


----------2.Find orders generated by London-based salespeople.------

/*SELECT Ord_No, Purch_Amt, Ord_Date, Customer_ID, Salesman_ID  
FROM Orders  
WHERE Salesman_ID IN (SELECT Salesman_ID FROM SalesMan WHERE City = 'London');*/


-----------3. Find orders from salespeople handling Customer ID 3007.--------

/*SELECT Ord_No, Purch_Amt, Ord_Date, Customer_ID, Salesman_ID  
FROM Orders  
WHERE Salesman_ID IN (SELECT Salesman_ID FROM Orders WHERE Customer_ID = 3007);*/


------------4.Find orders exceeding the average value on 10th October 2012.----------

/*SELECT Ord_No, Purch_Amt, Ord_Date, Customer_ID, Salesman_ID  
FROM Orders  
WHERE Ord_Date = '2012-10-10'  
AND Purch_Amt > (SELECT AVG(Purch_Amt) FROM Orders WHERE Ord_Date = '2012-10-10');*/


-------------5.Find orders generated in New York City.------------

/*SELECT Ord_No, Purch_Amt, Ord_Date, Customer_ID, Salesman_ID  
FROM Orders  
WHERE Salesman_ID IN (SELECT Salesman_ID FROM SalesMan WHERE City = 'New York');*/


--------------6.Find commission of salespeople in Paris.------------

----------Create Customer Table----------
/*GO
CREATE TABLE Customer (
    Customer_ID INT PRIMARY KEY,
    Cust_Name VARCHAR(100),
    City VARCHAR(50),
    Grade INT NULL,
    Salesman_ID INT
);


INSERT INTO Customer (Customer_ID, Cust_Name, City, Grade, Salesman_ID)
VALUES
    (3002, 'Nick Rimando', 'New York', 100, 5001),
    (3005, 'Graham Zusi', 'California', 200, 5002),
    (3001, 'Brad Guzan', 'London', 100, 5005),
    (3004, 'Fabian Johnson', 'Paaris', 300, 5006),
    (3007, 'Brad Davis', 'New York', 200, 5001),
    (3009, 'Geoff Cameron', 'Berlin', 100, 5003),
    (3008, 'Julian Green', 'London', 300, 5002),
    (3003, 'Jozy Altidor', 'Moncow', 200, 5007);
GO*/

--SELECT * FROM Customer;

/*SELECT Commission  
FROM SalesMan  
WHERE City = 'Paris';*/


--------------7.Find customers with ID below 2001 under Salesperson 'Mc Lyon'.-------

/*SELECT Customer_ID  
FROM Orders  
WHERE Salesman_ID = (SELECT Salesman_ID FROM SalesMan WHERE Name = 'Mc Lyon')  
AND Customer_ID < 2001;*/


--------------8.Count customers with above-average grades in New York City.---------

/*SELECT Grade, COUNT(*) AS Customer_Count  
FROM Customer  
WHERE City = 'New York'  
AND Grade > (SELECT AVG(Grade) FROM Customer)  
GROUP BY Grade;*/


---------------9.Find orders of salespeople with the maximum commission.---------------

/*SELECT Ord_No, Purch_Amt, Ord_Date, Salesman_ID  
FROM Orders  
WHERE Salesman_ID = (SELECT Salesman_ID FROM SalesMan WHERE Commission = (SELECT MAX(Commission) FROM SalesMan));*/


--------------10. Find customers who placed orders on 17th August 2012.--------------

/*SELECT Ord_No, Purch_Amt, Ord_Date, Customer_ID, Salesman_ID,  
       (SELECT Cust_Name FROM Customer WHERE Customer.Customer_ID = Orders.Customer_ID) AS Cust_Name  
FROM Orders  
WHERE Ord_Date = '2012-08-17';*/


--------------11.Find salespeople with more than one customer.------------

/*SELECT Salesman_ID, Name  
FROM SalesMan  
WHERE Salesman_ID IN (  
    SELECT Salesman_ID  
    FROM Customer  
    GROUP BY Salesman_ID  
    HAVING COUNT(Customer_ID) > 1  
);*/


---------------12.Find orders with amount above the average order value.-----------

/*SELECT Ord_No, Purch_Amt, Ord_Date, Customer_ID, Salesman_ID  
FROM Orders  
WHERE Purch_Amt > (SELECT AVG(Purch_Amt) FROM Orders);*/


----------------13. Find orders with amount greater than or equal to the average order value.-------

/*SELECT Ord_No, Purch_Amt, Ord_Date, Customer_ID, Salesman_ID  
FROM Orders  
WHERE Purch_Amt >= (SELECT AVG(Purch_Amt) FROM Orders);*/


------------------14.Show order sums by date exceeding the max order amount by 1000.-------------

/*SELECT Ord_Date, SUM(Purch_Amt) AS Total_Purchase  
FROM Orders  
GROUP BY Ord_Date  
HAVING SUM(Purch_Amt) > (SELECT MAX(Purch_Amt) + 1000 FROM Orders WHERE Ord_Date = Orders.Ord_Date);*/


-------------------15.Show all customers if any are located in London.--------------

/*SELECT *  
FROM Customer  
WHERE EXISTS (SELECT 1 FROM Customer WHERE City = 'London');*/


--------------------16. Find salespeople handling multiple customers.----------------

/*SELECT Salesman_ID, Name, City, Commission  
FROM SalesMan  
WHERE Salesman_ID IN (  
    SELECT Salesman_ID  
    FROM Customer  
    GROUP BY Salesman_ID  
    HAVING COUNT(Customer_ID) > 1  
);*/


-------------------17.Find salespeople handling only one customer.----------------

/*SELECT Salesman_ID, Name, City, Commission  
FROM SalesMan  
WHERE Salesman_ID IN (  
    SELECT Salesman_ID  
    FROM Customer  
    GROUP BY Salesman_ID  
    HAVING COUNT(Customer_ID) = 1  
);*/


---------------------18.Find salespeople handling customers with multiple orders.-----------

/*SELECT Salesman_ID, Name, City, Commission  
FROM SalesMan  
WHERE Salesman_ID IN (  
    SELECT Salesman_ID  
    FROM Orders  
    GROUP BY Salesman_ID, Customer_ID  
    HAVING COUNT(Ord_No) > 1  
);*/


--------------------19. Find salespeople in cities with at least one customer.------------

/*SELECT Salesman_ID, Name, City, Commission  
FROM SalesMan  
WHERE City IN (  
    SELECT DISTINCT City  
    FROM Customer  
);*/


--------------------20.Find salespeople living in a customer's city.---------------------

/*SELECT Salesman_ID, Name, City, Commission  
FROM SalesMan  
WHERE City IN (  
    SELECT DISTINCT City  
    FROM Customer  
    WHERE Customer.City = SalesMan.City
);*/


------------------21.Find salespeople with names alphabetically before customers .---------------

/*SELECT Salesman_ID, Name, City, Commission  
FROM SalesMan  
WHERE Name < ALL (  
    SELECT Cust_Name  
    FROM Customer  
    WHERE SalesMan.Salesman_ID = Customer.Salesman_ID
);*/


-------------------22.Find customers with higher grades than those below New York.-----------------

/*SELECT Customer_ID, Cust_Name, City, Grade, Salesman_ID  
FROM Customer  
WHERE Grade > ALL (  
    SELECT Grade  
    FROM Customer  
    WHERE City < 'New York'
);*/


------------------23.Find orders exceeding any order from September 10, 2012.-----------

/*SELECT Ord_No, Purch_Amt, Ord_Date, Customer_ID, Salesman_ID  
FROM Orders  
WHERE Purch_Amt > ANY (  
    SELECT Purch_Amt  
    FROM Orders  
    WHERE Ord_Date = '2012-09-10'
);*/


-----------------24.Find orders with amount less than any order from London.------------

/*SELECT Ord_No, Purch_Amt, Ord_Date, Customer_ID, Salesman_ID  
FROM Orders  
WHERE Purch_Amt < ANY (  
    SELECT Purch_Amt  
    FROM Orders O  
    JOIN Customer C ON O.Customer_ID = C.Customer_ID  
    WHERE C.City = 'London'
);*/


--------------------25.Find orders with amount less than the max order from London.----------

/*SELECT Ord_No, Purch_Amt, Ord_Date, Customer_ID, Salesman_ID  
FROM Orders  
WHERE Purch_Amt < (  
    SELECT MAX(Purch_Amt)  
    FROM Orders O  
    JOIN Customer C ON O.Customer_ID = C.Customer_ID  
    WHERE C.City = 'London'
);*/


---------------------26.Find customers with higher grades than those in New York.--------------

/*SELECT Customer_ID, Cust_Name, City, Grade, Salesman_ID  
FROM Customer  
WHERE Grade > ALL (  
    SELECT Grade  
    FROM Customer  
    WHERE City = 'New York'
);*/


-------------------27.Calculate total order amount by salespeople in customer cities.--------

/*SELECT S.Name, S.City, SUM(O.Purch_Amt) AS Total_Order_Amount  
FROM SalesMan S  
JOIN Orders O ON S.Salesman_ID = O.Salesman_ID  
JOIN Customer C ON O.Customer_ID = C.Customer_ID  
WHERE S.City = C.City  
GROUP BY S.Name, S.City;*/

----------------------28.Find customers with grades different from those in London.-------

/*SELECT Customer_ID, Cust_Name, City, Grade, Salesman_ID  
FROM Customer  
WHERE Grade != ALL (  
    SELECT Grade  
    FROM Customer  
    WHERE City = 'London'
);*/


---------------------29.Find customers with grades different from those in Paris.---------

/*SELECT Customer_ID, Cust_Name, City, Grade, Salesman_ID  
FROM Customer  
WHERE Grade != ALL (  
    SELECT Grade  
    FROM Customer  
    WHERE City = 'Paris'
);*/


-------------------30.Find customers with grades different from any in Dallas.--------------

/*SELECT Customer_ID, Cust_Name, City, Grade, Salesman_ID  
FROM Customer  
WHERE Grade != ANY (  
    SELECT Grade  
    FROM Customer  
    WHERE City = 'Dallas'
);*/


------------------31.Calculate average price of products by manufacturer.-------------

--Create company_mast Table

/*GO
CREATE TABLE company_mast (
    COM_ID INT PRIMARY KEY,
    COM_NAME VARCHAR(100)
);

INSERT INTO company_mast (COM_ID, COM_NAME)
VALUES
    (11, 'Samsung'),
    (12, 'iBall'),
    (13, 'Epsion'),
    (14, 'Zebronics'),
    (15, 'Asus'),
    (16, 'Frontech');
GO*/

--SELECT * FROM company_mast;


--Create item_mast Table

/*GO
CREATE TABLE item_mast (
    PRO_ID INT PRIMARY KEY,
    PRO_NAME VARCHAR(100),
    PRO_PRICE DECIMAL(10, 2),
    PRO_COM INT
);

INSERT INTO item_mast (PRO_ID, PRO_NAME, PRO_PRICE, PRO_COM)
VALUES
    (101, 'Mother Board', 3200.00, 15),
    (102, 'Key Board', 450.00, 16),
    (103, 'ZIP drive', 250.00, 14),
    (104, 'Speaker', 550.00, 16),
    (105, 'Monitor', 5000.00, 11),
    (106, 'DVD drive', 900.00, 12),
    (107, 'CD drive', 800.00, 12),
    (108, 'Printer', 2600.00, 13),
    (109, 'Refill cartridge', 350.00, 13),
    (110, 'Mouse', 250.00, 12);
GO*/
--SELECT * FROM item_mast;

/*SELECT COM_NAME, 
       (SELECT AVG(PRO_PRICE) FROM item_mast WHERE PRO_COM = C.COM_ID) AS Average_Price
FROM company_mast C;*/


------32.Calculate Average Price of Manufacturer's Products (≥ 350).-----------

/*SELECT COM_NAME, 
       (SELECT AVG(PRO_PRICE) 
        FROM item_mast 
        WHERE PRO_COM = C.COM_ID 
        AND PRO_PRICE >= 350) AS Average_Price
FROM company_mast C;*/


---------------33.Find Most Expensive Product of Each Company.-------------

/*SELECT COM_NAME,
       (SELECT TOP 1 PRO_NAME 
        FROM item_mast 
        WHERE PRO_COM = company_mast.COM_ID 
        ORDER BY PRO_PRICE DESC) AS Most_Expensive_Product
FROM company_mast;*/


------------------34.Find Employees with Last Name Gabriel or Dosio.----------

--Create emp_department Table

/*GO
CREATE TABLE emp_department (
    DPT_CODE INT PRIMARY KEY,
    DPT_NAME VARCHAR(50),
    DPT_ALLOTMENT DECIMAL(10, 2)
);

INSERT INTO emp_department (DPT_CODE, DPT_NAME, DPT_ALLOTMENT)
VALUES
    (57, 'IT', 65000),
    (63, 'Finance', 15000),
    (47, 'HR', 240000),
    (27, 'RD', 55000),
    (89, 'QC', 75000);
GO*/

--SELECT * FROM emp_department;


-- Create emp_details Table

/*GO
CREATE TABLE emp_details (
    EMP_IDNO INT PRIMARY KEY,
    EMP_FNAME VARCHAR(50),
    EMP_LNAME VARCHAR(50),
    EMP_DEPT INT
);

INSERT INTO emp_details (EMP_IDNO, EMP_FNAME, EMP_LNAME, EMP_DEPT)
VALUES
    (127323, 'Michale', 'Robbin', 57),
    (526689, 'Carlos', 'Snares', 63),
    (843795, 'Enric', 'Dosio', 57),
    (328717, 'Jhon', 'Snares', 63),
    (444527, 'Joseph', 'Dosni', 47),
    (659831, 'Zanifer', 'Emily', 47),
    (847674, 'Kuleswar', 'Sitaraman', 57),
    (748681, 'Henrey', 'Gabriel', 47),
    (555935, 'Alex', 'Manuel', 57);
GO*/

--SELECT * FROM emp_details;

/*SELECT e.EMP_IDNO, e.EMP_FNAME, e.EMP_LNAME, 
       (SELECT DPT_NAME FROM emp_department d WHERE d.DPT_CODE = e.EMP_DEPT) AS Department
FROM emp_details e
WHERE e.EMP_LNAME IN ('Gabriel', 'Dosio');*/


----------------35.Find Employees in Departments 89 or 63.----------------

/*SELECT EMP_IDNO, EMP_FNAME, EMP_LNAME, EMP_DEPT
FROM emp_details
WHERE EMP_DEPT IN (SELECT DPT_CODE FROM emp_department WHERE DPT_CODE IN (89, 63));*/


-------------------36.Find Employees in Departments with Allotment > Rs. 50000.------------

/*SELECT EMP_FNAME, EMP_LNAME
FROM emp_details
WHERE EMP_DEPT IN (SELECT DPT_CODE FROM emp_department WHERE DPT_ALLOTMENT > 50000);*/


-----------------37.Find Departments with Sanction Amount Above Average.---------

/*SELECT DPT_CODE, DPT_NAME, DPT_ALLOTMENT
FROM emp_department
WHERE DPT_ALLOTMENT > (SELECT AVG(DPT_ALLOTMENT) FROM emp_department);*/


----------------38.Find Departments with More Than Two Employees.--------------

/*SELECT DPT_NAME
FROM emp_department
WHERE DPT_CODE IN (
    SELECT EMP_DEPT
    FROM emp_details
    GROUP BY EMP_DEPT
    HAVING COUNT(EMP_IDNO) > 2
);*/


-------------------39.Find Employees in Departments with Second Lowest Allotment .--------------

/*SELECT E.EMP_FNAME, E.EMP_LNAME
FROM emp_details E
WHERE E.EMP_DEPT = (
    SELECT DPT_CODE
    FROM emp_department
    WHERE DPT_ALLOTMENT = (
        SELECT MIN(DPT_ALLOTMENT)
        FROM emp_department
        WHERE DPT_ALLOTMENT > (SELECT MIN(DPT_ALLOTMENT) FROM emp_department))
);*/















































